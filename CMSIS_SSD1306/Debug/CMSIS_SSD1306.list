
CMSIS_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000910  08000910  00010910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000920  08000920  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000920  08000920  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000920  08000920  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000920  08000920  00010920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000924  08000924  00010924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000004  0800092c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0800092c  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000126a  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006f6  00000000  00000000  00021297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00021990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00021ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001005b  00000000  00000000  00021ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b6e  00000000  00000000  00031c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000538b8  00000000  00000000  00033771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00087029  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000320  00000000  00000000  0008707c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080008f8 	.word	0x080008f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080008f8 	.word	0x080008f8

08000170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8000182:	2300      	movs	r3, #0
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	2300      	movs	r3, #0
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	2300      	movs	r3, #0
 800018c:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800018e:	4b2f      	ldr	r3, [pc, #188]	; (800024c <SystemCoreClockUpdate+0xd0>)
 8000190:	685b      	ldr	r3, [r3, #4]
 8000192:	f003 030c 	and.w	r3, r3, #12
 8000196:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	2b08      	cmp	r3, #8
 800019c:	d011      	beq.n	80001c2 <SystemCoreClockUpdate+0x46>
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	2b08      	cmp	r3, #8
 80001a2:	d83a      	bhi.n	800021a <SystemCoreClockUpdate+0x9e>
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d003      	beq.n	80001b2 <SystemCoreClockUpdate+0x36>
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	2b04      	cmp	r3, #4
 80001ae:	d004      	beq.n	80001ba <SystemCoreClockUpdate+0x3e>
 80001b0:	e033      	b.n	800021a <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80001b2:	4b27      	ldr	r3, [pc, #156]	; (8000250 <SystemCoreClockUpdate+0xd4>)
 80001b4:	4a27      	ldr	r2, [pc, #156]	; (8000254 <SystemCoreClockUpdate+0xd8>)
 80001b6:	601a      	str	r2, [r3, #0]
      break;
 80001b8:	e033      	b.n	8000222 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80001ba:	4b25      	ldr	r3, [pc, #148]	; (8000250 <SystemCoreClockUpdate+0xd4>)
 80001bc:	4a25      	ldr	r2, [pc, #148]	; (8000254 <SystemCoreClockUpdate+0xd8>)
 80001be:	601a      	str	r2, [r3, #0]
      break;
 80001c0:	e02f      	b.n	8000222 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80001c2:	4b22      	ldr	r3, [pc, #136]	; (800024c <SystemCoreClockUpdate+0xd0>)
 80001c4:	685b      	ldr	r3, [r3, #4]
 80001c6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80001ca:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80001cc:	4b1f      	ldr	r3, [pc, #124]	; (800024c <SystemCoreClockUpdate+0xd0>)
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80001d4:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	0c9b      	lsrs	r3, r3, #18
 80001da:	3302      	adds	r3, #2
 80001dc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d106      	bne.n	80001f2 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80001e4:	68bb      	ldr	r3, [r7, #8]
 80001e6:	4a1c      	ldr	r2, [pc, #112]	; (8000258 <SystemCoreClockUpdate+0xdc>)
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	4a18      	ldr	r2, [pc, #96]	; (8000250 <SystemCoreClockUpdate+0xd4>)
 80001ee:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 80001f0:	e017      	b.n	8000222 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80001f2:	4b16      	ldr	r3, [pc, #88]	; (800024c <SystemCoreClockUpdate+0xd0>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d006      	beq.n	800020c <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	4a15      	ldr	r2, [pc, #84]	; (8000258 <SystemCoreClockUpdate+0xdc>)
 8000202:	fb02 f303 	mul.w	r3, r2, r3
 8000206:	4a12      	ldr	r2, [pc, #72]	; (8000250 <SystemCoreClockUpdate+0xd4>)
 8000208:	6013      	str	r3, [r2, #0]
      break;
 800020a:	e00a      	b.n	8000222 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	4a11      	ldr	r2, [pc, #68]	; (8000254 <SystemCoreClockUpdate+0xd8>)
 8000210:	fb02 f303 	mul.w	r3, r2, r3
 8000214:	4a0e      	ldr	r2, [pc, #56]	; (8000250 <SystemCoreClockUpdate+0xd4>)
 8000216:	6013      	str	r3, [r2, #0]
      break;
 8000218:	e003      	b.n	8000222 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800021a:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <SystemCoreClockUpdate+0xd4>)
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <SystemCoreClockUpdate+0xd8>)
 800021e:	601a      	str	r2, [r3, #0]
      break;
 8000220:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <SystemCoreClockUpdate+0xd0>)
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	091b      	lsrs	r3, r3, #4
 8000228:	f003 030f 	and.w	r3, r3, #15
 800022c:	4a0b      	ldr	r2, [pc, #44]	; (800025c <SystemCoreClockUpdate+0xe0>)
 800022e:	5cd3      	ldrb	r3, [r2, r3]
 8000230:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000232:	4b07      	ldr	r3, [pc, #28]	; (8000250 <SystemCoreClockUpdate+0xd4>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	fa22 f303 	lsr.w	r3, r2, r3
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <SystemCoreClockUpdate+0xd4>)
 800023e:	6013      	str	r3, [r2, #0]
}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000
 8000250:	20000000 	.word	0x20000000
 8000254:	007a1200 	.word	0x007a1200
 8000258:	003d0900 	.word	0x003d0900
 800025c:	08000910 	.word	0x08000910

08000260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	6039      	str	r1, [r7, #0]
 800026a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800026c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000270:	2b00      	cmp	r3, #0
 8000272:	db0a      	blt.n	800028a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	b2da      	uxtb	r2, r3
 8000278:	490c      	ldr	r1, [pc, #48]	; (80002ac <__NVIC_SetPriority+0x4c>)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	0112      	lsls	r2, r2, #4
 8000280:	b2d2      	uxtb	r2, r2
 8000282:	440b      	add	r3, r1
 8000284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000288:	e00a      	b.n	80002a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	b2da      	uxtb	r2, r3
 800028e:	4908      	ldr	r1, [pc, #32]	; (80002b0 <__NVIC_SetPriority+0x50>)
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	f003 030f 	and.w	r3, r3, #15
 8000296:	3b04      	subs	r3, #4
 8000298:	0112      	lsls	r2, r2, #4
 800029a:	b2d2      	uxtb	r2, r2
 800029c:	440b      	add	r3, r1
 800029e:	761a      	strb	r2, [r3, #24]
}
 80002a0:	bf00      	nop
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000e100 	.word	0xe000e100
 80002b0:	e000ed00 	.word	0xe000ed00

080002b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3b01      	subs	r3, #1
 80002c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002c4:	d301      	bcc.n	80002ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80002c6:	2301      	movs	r3, #1
 80002c8:	e00f      	b.n	80002ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <SysTick_Config+0x40>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3b01      	subs	r3, #1
 80002d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80002d2:	210f      	movs	r1, #15
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f7ff ffc2 	bl	8000260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <SysTick_Config+0x40>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e2:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <SysTick_Config+0x40>)
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002e8:	2300      	movs	r3, #0
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	e000e010 	.word	0xe000e010

080002f8 <SysTick_Handler>:
void delay(volatile uint32_t ms){
	uint32_t targetTime = msTicks + ms;
	while (msTicks < targetTime);
}

void SysTick_Handler(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
    msTicks++;
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <SysTick_Handler+0x18>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	4a03      	ldr	r2, [pc, #12]	; (8000310 <SysTick_Handler+0x18>)
 8000304:	6013      	str	r3, [r2, #0]
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	20000020 	.word	0x20000020

08000314 <delay_Init>:

void delay_Init()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock/1000);
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <delay_Init+0x1c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <delay_Init+0x20>)
 800031e:	fba2 2303 	umull	r2, r3, r2, r3
 8000322:	099b      	lsrs	r3, r3, #6
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ffc5 	bl	80002b4 <SysTick_Config>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000000 	.word	0x20000000
 8000334:	10624dd3 	.word	0x10624dd3

08000338 <main>:
#include "main.h"

void RCC_Init();

int main(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	RCC_Init();
 800033c:	f000 f810 	bl	8000360 <RCC_Init>
	delay_Init();
 8000340:	f7ff ffe8 	bl	8000314 <delay_Init>
	SPIandPA_Init();
 8000344:	f000 f842 	bl	80003cc <SPIandPA_Init>
	ssd1306_Init();
 8000348:	f000 f8ba 	bl	80004c0 <ssd1306_Init>
	while(1){
		ssd1306_DrawCircle(60, 40, 15, White);
 800034c:	2301      	movs	r3, #1
 800034e:	220f      	movs	r2, #15
 8000350:	2128      	movs	r1, #40	; 0x28
 8000352:	203c      	movs	r0, #60	; 0x3c
 8000354:	f000 f988 	bl	8000668 <ssd1306_DrawCircle>
		ssd1306UpdateScreen();
 8000358:	f000 f95a 	bl	8000610 <ssd1306UpdateScreen>
		ssd1306_DrawCircle(60, 40, 15, White);
 800035c:	e7f6      	b.n	800034c <main+0x14>
	...

08000360 <RCC_Init>:
	}
}

void RCC_Init()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <RCC_Init+0x68>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <RCC_Init+0x68>)
 800036a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800036e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8000370:	bf00      	nop
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <RCC_Init+0x68>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <RCC_Init+0x12>

	RCC->CFGR |= RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL7;
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <RCC_Init+0x68>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <RCC_Init+0x68>)
 8000384:	f443 13a8 	orr.w	r3, r3, #1376256	; 0x150000
 8000388:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <RCC_Init+0x68>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <RCC_Init+0x68>)
 8000390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000394:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000396:	bf00      	nop
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <RCC_Init+0x68>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0f9      	beq.n	8000398 <RCC_Init+0x38>

	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <RCC_Init+0x68>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <RCC_Init+0x68>)
 80003aa:	f043 0302 	orr.w	r3, r3, #2
 80003ae:	6053      	str	r3, [r2, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80003b0:	bf00      	nop
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <RCC_Init+0x68>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	f003 030c 	and.w	r3, r3, #12
 80003ba:	2b08      	cmp	r3, #8
 80003bc:	d1f9      	bne.n	80003b2 <RCC_Init+0x52>

	SystemCoreClockUpdate();
 80003be:	f7ff fedd 	bl	800017c <SystemCoreClockUpdate>
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <SPIandPA_Init>:
#include "spi.h"

void SPIandPA_Init(){
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_SPI1EN; // Тактирование SPI и GPIOA
 80003d0:	4b27      	ldr	r3, [pc, #156]	; (8000470 <SPIandPA_Init+0xa4>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a26      	ldr	r2, [pc, #152]	; (8000470 <SPIandPA_Init+0xa4>)
 80003d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]

	GPIOA->CRL|= GPIO_CRL_MODE3 |GPIO_CRL_MODE4 | GPIO_CRL_MODE6; // 50 мгц выходы PA3, PA4, PA6
 80003e0:	4b24      	ldr	r3, [pc, #144]	; (8000474 <SPIandPA_Init+0xa8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a23      	ldr	r2, [pc, #140]	; (8000474 <SPIandPA_Init+0xa8>)
 80003e6:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80003ea:	f443 334c 	orr.w	r3, r3, #208896	; 0x33000
 80003ee:	6013      	str	r3, [r2, #0]
	GPIOA->CRL&= ~(GPIO_CRL_CNF3 | GPIO_CRL_CNF5 | GPIO_CRL_CNF6);// PA3, PA5, PA6 выход push-pull
 80003f0:	4b20      	ldr	r3, [pc, #128]	; (8000474 <SPIandPA_Init+0xa8>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a1f      	ldr	r2, [pc, #124]	; (8000474 <SPIandPA_Init+0xa8>)
 80003f6:	f023 634c 	bic.w	r3, r3, #213909504	; 0xcc00000
 80003fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003fe:	6013      	str	r3, [r2, #0]

    GPIOA->CRL |= GPIO_CRL_MODE5 | GPIO_CRL_MODE7;
 8000400:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <SPIandPA_Init+0xa8>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <SPIandPA_Init+0xa8>)
 8000406:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800040a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800040e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_CNF7);  // Очистка бяки
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <SPIandPA_Init+0xa8>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a17      	ldr	r2, [pc, #92]	; (8000474 <SPIandPA_Init+0xa8>)
 8000416:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800041a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800041e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF5_1 | GPIO_CRL_CNF7_1; // Альт. функция для PA5, PA7 с push-pull
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <SPIandPA_Init+0xa8>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a13      	ldr	r2, [pc, #76]	; (8000474 <SPIandPA_Init+0xa8>)
 8000426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800042a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800042e:	6013      	str	r3, [r2, #0]

    SPI1->CR1 |= SPI_CR1_MSTR; // Режим мастера
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <SPIandPA_Init+0xac>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a10      	ldr	r2, [pc, #64]	; (8000478 <SPIandPA_Init+0xac>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (0x03 & SPI_CR1_BR); // Деление частоты на 16 (56 / 16 = 3.5 мгц)
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <SPIandPA_Init+0xac>)
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <SPIandPA_Init+0xac>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SSM; // Программная настройка NSS
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <SPIandPA_Init+0xac>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <SPIandPA_Init+0xac>)
 800044a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800044e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SSI;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <SPIandPA_Init+0xac>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <SPIandPA_Init+0xac>)
 8000456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800045a:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SPE;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <SPIandPA_Init+0xac>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a05      	ldr	r2, [pc, #20]	; (8000478 <SPIandPA_Init+0xac>)
 8000462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800
 8000478:	40013000 	.word	0x40013000

0800047c <ssd1306_Reset>:
#include "delay.h"
#include "spi.h"

static uint8_t display[SIZE];

void ssd1306_Reset(){
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
	uint16_t i;
	RES_RES;
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <ssd1306_Reset+0x3c>)
 8000484:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000488:	611a      	str	r2, [r3, #16]
	for(i = 0; i < SIZE; i++)
 800048a:	2300      	movs	r3, #0
 800048c:	80fb      	strh	r3, [r7, #6]
 800048e:	e006      	b.n	800049e <ssd1306_Reset+0x22>
	{
		display[i] = 0;
 8000490:	88fb      	ldrh	r3, [r7, #6]
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <ssd1306_Reset+0x40>)
 8000494:	2100      	movs	r1, #0
 8000496:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < SIZE; i++)
 8000498:	88fb      	ldrh	r3, [r7, #6]
 800049a:	3301      	adds	r3, #1
 800049c:	80fb      	strh	r3, [r7, #6]
 800049e:	88fb      	ldrh	r3, [r7, #6]
 80004a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004a4:	d3f4      	bcc.n	8000490 <ssd1306_Reset+0x14>
	}
	RES_SET;
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <ssd1306_Reset+0x3c>)
 80004a8:	2208      	movs	r2, #8
 80004aa:	611a      	str	r2, [r3, #16]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40010800 	.word	0x40010800
 80004bc:	20000024 	.word	0x20000024

080004c0 <ssd1306_Init>:

void ssd1306_Init()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	ssd1306_Reset();
 80004c4:	f7ff ffda 	bl	800047c <ssd1306_Reset>

	ssd1306SendCommand(0xAE); //display off
 80004c8:	20ae      	movs	r0, #174	; 0xae
 80004ca:	f000 f9b1 	bl	8000830 <ssd1306SendCommand>
	ssd1306SendCommand(0x20); //Set Memory Addressing Mode
 80004ce:	2020      	movs	r0, #32
 80004d0:	f000 f9ae 	bl	8000830 <ssd1306SendCommand>
	ssd1306SendCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 f9ab 	bl	8000830 <ssd1306SendCommand>
	                            // 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306SendCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80004da:	20b0      	movs	r0, #176	; 0xb0
 80004dc:	f000 f9a8 	bl	8000830 <ssd1306SendCommand>
	ssd1306SendCommand(0xC8); //Set COM Output Scan Direction
 80004e0:	20c8      	movs	r0, #200	; 0xc8
 80004e2:	f000 f9a5 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0x00); //---set low column address
 80004e6:	2000      	movs	r0, #0
 80004e8:	f000 f9a2 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0x10); //---set high column address
 80004ec:	2010      	movs	r0, #16
 80004ee:	f000 f99f 	bl	8000830 <ssd1306SendCommand>

    ssd1306SendCommand(0x40); //--set start line address - CHECK
 80004f2:	2040      	movs	r0, #64	; 0x40
 80004f4:	f000 f99c 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0x81); //set contrast control register
 80004f8:	2081      	movs	r0, #129	; 0x81
 80004fa:	f000 f999 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0xFF);
 80004fe:	20ff      	movs	r0, #255	; 0xff
 8000500:	f000 f996 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0xA1); //set segment re-map 0 to 127
 8000504:	20a1      	movs	r0, #161	; 0xa1
 8000506:	f000 f993 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0xA6); //--set normal color
 800050a:	20a6      	movs	r0, #166	; 0xa6
 800050c:	f000 f990 	bl	8000830 <ssd1306SendCommand>

    ssd1306SendCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000510:	20a4      	movs	r0, #164	; 0xa4
 8000512:	f000 f98d 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0xD3); //-set display offset - CHECK
 8000516:	20d3      	movs	r0, #211	; 0xd3
 8000518:	f000 f98a 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0x00); //-not offset
 800051c:	2000      	movs	r0, #0
 800051e:	f000 f987 	bl	8000830 <ssd1306SendCommand>

    ssd1306SendCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000522:	20d5      	movs	r0, #213	; 0xd5
 8000524:	f000 f984 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0xF0); //--set divide ratio
 8000528:	20f0      	movs	r0, #240	; 0xf0
 800052a:	f000 f981 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0xD9); //--set pre-charge period
 800052e:	20d9      	movs	r0, #217	; 0xd9
 8000530:	f000 f97e 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0x22); //
 8000534:	2022      	movs	r0, #34	; 0x22
 8000536:	f000 f97b 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0xDA); //--set com pins hardware configuration - CHECK
 800053a:	20da      	movs	r0, #218	; 0xda
 800053c:	f000 f978 	bl	8000830 <ssd1306SendCommand>

    ssd1306SendCommand(0x12);
 8000540:	2012      	movs	r0, #18
 8000542:	f000 f975 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0xDB); //--set vcomh
 8000546:	20db      	movs	r0, #219	; 0xdb
 8000548:	f000 f972 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0x20); //0x20,0.77xVcc
 800054c:	2020      	movs	r0, #32
 800054e:	f000 f96f 	bl	8000830 <ssd1306SendCommand>

    ssd1306SendCommand(0x8D); //--set DC-DC enable
 8000552:	208d      	movs	r0, #141	; 0x8d
 8000554:	f000 f96c 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0x14); //
 8000558:	2014      	movs	r0, #20
 800055a:	f000 f969 	bl	8000830 <ssd1306SendCommand>
    ssd1306SendCommand(0xAF); //Enable
 800055e:	20af      	movs	r0, #175	; 0xaf
 8000560:	f000 f966 	bl	8000830 <ssd1306SendCommand>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <ssd1306DrawPixel>:

void ssd1306DrawPixel(uint16_t x, uint16_t y,COLOR color){
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	80fb      	strh	r3, [r7, #6]
 8000572:	460b      	mov	r3, r1
 8000574:	80bb      	strh	r3, [r7, #4]
 8000576:	4613      	mov	r3, r2
 8000578:	70fb      	strb	r3, [r7, #3]
	if(x < SSD1306_WIDTH && y < SSD1306_HEIGHT && x >= 0 && y >= 0)
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b7f      	cmp	r3, #127	; 0x7f
 800057e:	d83f      	bhi.n	8000600 <ssd1306DrawPixel+0x98>
 8000580:	88bb      	ldrh	r3, [r7, #4]
 8000582:	2b3f      	cmp	r3, #63	; 0x3f
 8000584:	d83c      	bhi.n	8000600 <ssd1306DrawPixel+0x98>
	{
		if(color == White)
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d11a      	bne.n	80005c2 <ssd1306DrawPixel+0x5a>
		{
			display[x+(y/8)*SSD1306_WIDTH] |= (1 << (y % 8));
 800058c:	88fa      	ldrh	r2, [r7, #6]
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	08db      	lsrs	r3, r3, #3
 8000592:	b298      	uxth	r0, r3
 8000594:	4603      	mov	r3, r0
 8000596:	01db      	lsls	r3, r3, #7
 8000598:	4413      	add	r3, r2
 800059a:	4a1c      	ldr	r2, [pc, #112]	; (800060c <ssd1306DrawPixel+0xa4>)
 800059c:	5cd3      	ldrb	r3, [r2, r3]
 800059e:	b25a      	sxtb	r2, r3
 80005a0:	88bb      	ldrh	r3, [r7, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	2101      	movs	r1, #1
 80005a8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b259      	sxtb	r1, r3
 80005b2:	88fa      	ldrh	r2, [r7, #6]
 80005b4:	4603      	mov	r3, r0
 80005b6:	01db      	lsls	r3, r3, #7
 80005b8:	4413      	add	r3, r2
 80005ba:	b2c9      	uxtb	r1, r1
 80005bc:	4a13      	ldr	r2, [pc, #76]	; (800060c <ssd1306DrawPixel+0xa4>)
 80005be:	54d1      	strb	r1, [r2, r3]
		else if(color == Black)
		{
			display[x+(y/8)*SSD1306_WIDTH] &= ~(1 << (y % 8));
		}
	}
}
 80005c0:	e01e      	b.n	8000600 <ssd1306DrawPixel+0x98>
		else if(color == Black)
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d11b      	bne.n	8000600 <ssd1306DrawPixel+0x98>
			display[x+(y/8)*SSD1306_WIDTH] &= ~(1 << (y % 8));
 80005c8:	88fa      	ldrh	r2, [r7, #6]
 80005ca:	88bb      	ldrh	r3, [r7, #4]
 80005cc:	08db      	lsrs	r3, r3, #3
 80005ce:	b298      	uxth	r0, r3
 80005d0:	4603      	mov	r3, r0
 80005d2:	01db      	lsls	r3, r3, #7
 80005d4:	4413      	add	r3, r2
 80005d6:	4a0d      	ldr	r2, [pc, #52]	; (800060c <ssd1306DrawPixel+0xa4>)
 80005d8:	5cd3      	ldrb	r3, [r2, r3]
 80005da:	b25a      	sxtb	r2, r3
 80005dc:	88bb      	ldrh	r3, [r7, #4]
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	2101      	movs	r1, #1
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	43db      	mvns	r3, r3
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	4013      	ands	r3, r2
 80005f0:	b259      	sxtb	r1, r3
 80005f2:	88fa      	ldrh	r2, [r7, #6]
 80005f4:	4603      	mov	r3, r0
 80005f6:	01db      	lsls	r3, r3, #7
 80005f8:	4413      	add	r3, r2
 80005fa:	b2c9      	uxtb	r1, r1
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <ssd1306DrawPixel+0xa4>)
 80005fe:	54d1      	strb	r1, [r2, r3]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000024 	.word	0x20000024

08000610 <ssd1306UpdateScreen>:

void ssd1306UpdateScreen(){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	e019      	b.n	8000650 <ssd1306UpdateScreen+0x40>
        ssd1306SendCommand(0xB0 + i); // Set the current RAM page address.
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	3b50      	subs	r3, #80	; 0x50
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f904 	bl	8000830 <ssd1306SendCommand>
        ssd1306SendCommand(0x00);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f901 	bl	8000830 <ssd1306SendCommand>
        ssd1306SendCommand(0x10);
 800062e:	2010      	movs	r0, #16
 8000630:	f000 f8fe 	bl	8000830 <ssd1306SendCommand>
        DATA;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <ssd1306UpdateScreen+0x50>)
 8000636:	2240      	movs	r2, #64	; 0x40
 8000638:	611a      	str	r2, [r3, #16]
        spiSendArray(&display[SSD1306_WIDTH*i], SSD1306_WIDTH);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	01db      	lsls	r3, r3, #7
 800063e:	4a09      	ldr	r2, [pc, #36]	; (8000664 <ssd1306UpdateScreen+0x54>)
 8000640:	4413      	add	r3, r2
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f89f 	bl	8000788 <spiSendArray>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	3301      	adds	r3, #1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b07      	cmp	r3, #7
 8000654:	d9e2      	bls.n	800061c <ssd1306UpdateScreen+0xc>
    }
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40010800 	.word	0x40010800
 8000664:	20000024 	.word	0x20000024

08000668 <ssd1306_DrawCircle>:
		else if(color == Black)
			display[i] = 0;
	}
}

void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,COLOR par_color) {
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b087      	sub	sp, #28
 800066c:	af00      	add	r7, sp, #0
 800066e:	4604      	mov	r4, r0
 8000670:	4608      	mov	r0, r1
 8000672:	4611      	mov	r1, r2
 8000674:	461a      	mov	r2, r3
 8000676:	4623      	mov	r3, r4
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	4603      	mov	r3, r0
 800067c:	71bb      	strb	r3, [r7, #6]
 800067e:	460b      	mov	r3, r1
 8000680:	717b      	strb	r3, [r7, #5]
 8000682:	4613      	mov	r3, r2
 8000684:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8000686:	797b      	ldrb	r3, [r7, #5]
 8000688:	425b      	negs	r3, r3
 800068a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	f1c3 0301 	rsb	r3, r3, #1
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db6d      	blt.n	800077e <ssd1306_DrawCircle+0x116>
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	2b3f      	cmp	r3, #63	; 0x3f
 80006a6:	d86a      	bhi.n	800077e <ssd1306_DrawCircle+0x116>
        return;
    }

    do {
    	ssd1306DrawPixel(par_x - x, par_y + y, par_color);
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	b298      	uxth	r0, r3
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	4413      	add	r3, r2
 80006be:	b29b      	uxth	r3, r3
 80006c0:	793a      	ldrb	r2, [r7, #4]
 80006c2:	4619      	mov	r1, r3
 80006c4:	f7ff ff50 	bl	8000568 <ssd1306DrawPixel>
    	ssd1306DrawPixel(par_x + x, par_y + y, par_color);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4413      	add	r3, r2
 80006d2:	b298      	uxth	r0, r3
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b29b      	uxth	r3, r3
 80006e0:	793a      	ldrb	r2, [r7, #4]
 80006e2:	4619      	mov	r1, r3
 80006e4:	f7ff ff40 	bl	8000568 <ssd1306DrawPixel>
        ssd1306DrawPixel(par_x + x, par_y - y, par_color);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	4413      	add	r3, r2
 80006f2:	b298      	uxth	r0, r3
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	b29b      	uxth	r3, r3
 8000700:	793a      	ldrb	r2, [r7, #4]
 8000702:	4619      	mov	r1, r3
 8000704:	f7ff ff30 	bl	8000568 <ssd1306DrawPixel>
        ssd1306DrawPixel(par_x - x, par_y - y, par_color);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	b29a      	uxth	r2, r3
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	b29b      	uxth	r3, r3
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	b298      	uxth	r0, r3
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	b29a      	uxth	r2, r3
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	b29b      	uxth	r3, r3
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	793a      	ldrb	r2, [r7, #4]
 8000722:	4619      	mov	r1, r3
 8000724:	f7ff ff20 	bl	8000568 <ssd1306DrawPixel>
        e2 = err;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	429a      	cmp	r2, r3
 8000732:	dc13      	bgt.n	800075c <ssd1306_DrawCircle+0xf4>
            y++;
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	3301      	adds	r3, #1
 8000738:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	3301      	adds	r3, #1
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	4413      	add	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	425b      	negs	r3, r3
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	429a      	cmp	r2, r3
 800074e:	d105      	bne.n	800075c <ssd1306_DrawCircle+0xf4>
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	429a      	cmp	r2, r3
 8000756:	dc01      	bgt.n	800075c <ssd1306_DrawCircle+0xf4>
                e2 = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	429a      	cmp	r2, r3
 8000762:	dd08      	ble.n	8000776 <ssd1306_DrawCircle+0x10e>
            x++;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	3301      	adds	r3, #1
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	dd95      	ble.n	80006a8 <ssd1306_DrawCircle+0x40>

    return;
 800077c:	e000      	b.n	8000780 <ssd1306_DrawCircle+0x118>
        return;
 800077e:	bf00      	nop
}
 8000780:	371c      	adds	r7, #28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd90      	pop	{r4, r7, pc}
	...

08000788 <spiSendArray>:

void spiSendArray(uint8_t *data, uint16_t length){
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	807b      	strh	r3, [r7, #2]
	CS_RES;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <spiSendArray+0x60>)
 8000796:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800079a:	611a      	str	r2, [r3, #16]
	for (uint16_t i = 0; i < length; i++) {
 800079c:	2300      	movs	r3, #0
 800079e:	81fb      	strh	r3, [r7, #14]
 80007a0:	e00f      	b.n	80007c2 <spiSendArray+0x3a>
		while (!(SPI1->SR & SPI_SR_TXE));
 80007a2:	bf00      	nop
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <spiSendArray+0x64>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f003 0302 	and.w	r3, r3, #2
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d0f9      	beq.n	80007a4 <spiSendArray+0x1c>
		SPI1->DR = data[i];
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <spiSendArray+0x64>)
 80007ba:	60da      	str	r2, [r3, #12]
	for (uint16_t i = 0; i < length; i++) {
 80007bc:	89fb      	ldrh	r3, [r7, #14]
 80007be:	3301      	adds	r3, #1
 80007c0:	81fb      	strh	r3, [r7, #14]
 80007c2:	89fa      	ldrh	r2, [r7, #14]
 80007c4:	887b      	ldrh	r3, [r7, #2]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3eb      	bcc.n	80007a2 <spiSendArray+0x1a>
	}
	while (SPI1->SR & SPI_SR_BSY);
 80007ca:	bf00      	nop
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <spiSendArray+0x64>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1f9      	bne.n	80007cc <spiSendArray+0x44>
	CS_SET;
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <spiSendArray+0x60>)
 80007da:	2210      	movs	r2, #16
 80007dc:	611a      	str	r2, [r3, #16]
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40010800 	.word	0x40010800
 80007ec:	40013000 	.word	0x40013000

080007f0 <spiTransmit>:

void spiTransmit(uint8_t data)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	CS_RES;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <spiTransmit+0x38>)
 80007fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000800:	611a      	str	r2, [r3, #16]
	SPI1->DR = data;
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <spiTransmit+0x3c>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	60d3      	str	r3, [r2, #12]
	while((SPI1->SR & SPI_SR_BSY));
 8000808:	bf00      	nop
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <spiTransmit+0x3c>)
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1f9      	bne.n	800080a <spiTransmit+0x1a>
	CS_SET;
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <spiTransmit+0x38>)
 8000818:	2210      	movs	r2, #16
 800081a:	611a      	str	r2, [r3, #16]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40010800 	.word	0x40010800
 800082c:	40013000 	.word	0x40013000

08000830 <ssd1306SendCommand>:

void ssd1306SendCommand(uint8_t command)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	COMMAND;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <ssd1306SendCommand+0x28>)
 800083c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000840:	611a      	str	r2, [r3, #16]
	spiTransmit(command);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ffd3 	bl	80007f0 <spiTransmit>
	DATA;
 800084a:	4b03      	ldr	r3, [pc, #12]	; (8000858 <ssd1306SendCommand+0x28>)
 800084c:	2240      	movs	r2, #64	; 0x40
 800084e:	611a      	str	r2, [r3, #16]
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40010800 	.word	0x40010800

0800085c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000860:	f7ff fc86 	bl	8000170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	; (800089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	; (80008a8 <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800088a:	f000 f811 	bl	80008b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fd53 	bl	8000338 <main>

08000892 <LoopForever>:

LoopForever:
    b LoopForever
 8000892:	e7fe      	b.n	8000892 <LoopForever>
  ldr   r0, =_estack
 8000894:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008a0:	08000928 	.word	0x08000928
  ldr r2, =_sbss
 80008a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008a8:	20000424 	.word	0x20000424

080008ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_2_IRQHandler>
	...

080008b0 <__libc_init_array>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	2600      	movs	r6, #0
 80008b4:	4d0c      	ldr	r5, [pc, #48]	; (80008e8 <__libc_init_array+0x38>)
 80008b6:	4c0d      	ldr	r4, [pc, #52]	; (80008ec <__libc_init_array+0x3c>)
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	10a4      	asrs	r4, r4, #2
 80008bc:	42a6      	cmp	r6, r4
 80008be:	d109      	bne.n	80008d4 <__libc_init_array+0x24>
 80008c0:	f000 f81a 	bl	80008f8 <_init>
 80008c4:	2600      	movs	r6, #0
 80008c6:	4d0a      	ldr	r5, [pc, #40]	; (80008f0 <__libc_init_array+0x40>)
 80008c8:	4c0a      	ldr	r4, [pc, #40]	; (80008f4 <__libc_init_array+0x44>)
 80008ca:	1b64      	subs	r4, r4, r5
 80008cc:	10a4      	asrs	r4, r4, #2
 80008ce:	42a6      	cmp	r6, r4
 80008d0:	d105      	bne.n	80008de <__libc_init_array+0x2e>
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d8:	4798      	blx	r3
 80008da:	3601      	adds	r6, #1
 80008dc:	e7ee      	b.n	80008bc <__libc_init_array+0xc>
 80008de:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e2:	4798      	blx	r3
 80008e4:	3601      	adds	r6, #1
 80008e6:	e7f2      	b.n	80008ce <__libc_init_array+0x1e>
 80008e8:	08000920 	.word	0x08000920
 80008ec:	08000920 	.word	0x08000920
 80008f0:	08000920 	.word	0x08000920
 80008f4:	08000924 	.word	0x08000924

080008f8 <_init>:
 80008f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fa:	bf00      	nop
 80008fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008fe:	bc08      	pop	{r3}
 8000900:	469e      	mov	lr, r3
 8000902:	4770      	bx	lr

08000904 <_fini>:
 8000904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000906:	bf00      	nop
 8000908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090a:	bc08      	pop	{r3}
 800090c:	469e      	mov	lr, r3
 800090e:	4770      	bx	lr
